/*
 * generated by Xtext 2.25.0
 */
package com.minres.uarchdsl.scoping

import com.minres.coredsl.coreDsl.CoreDslPackage
import com.minres.uarchdsl.uArchDsl.MicroArchDef
import com.minres.uarchdsl.uArchDsl.Model
import com.minres.uarchdsl.uArchDsl.ResourceElement
import com.minres.uarchdsl.uArchDsl.UArchDslPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

import static extension com.minres.coredsl.util.ModelUtil.*

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class UArchDslScopeProvider extends AbstractUArchDslScopeProvider {

	override IScope getScope(EObject context, EReference reference) {
		if(reference.EReferenceType ===	UArchDslPackage.Literals.RESOURCE_ELEMENT){
			Scopes.scopeFor(EcoreUtil2.getAllContentsOfType(context.model, ResourceElement), IScope.NULLSCOPE);
		} else if(reference.EReferenceType ===	CoreDslPackage.Literals.INSTRUCTION){
			Scopes.scopeFor(context.microArch.core.allInstr, IScope.NULLSCOPE);
		} else {
			println('''scope for «reference.getName()»(class «reference.getEReferenceType().getName()») in context «context.eClass().getName()»''')
			super.getScope(context, reference)
		}
	}
		
	def Model model(EObject object){
		if(object instanceof Model) 
			object
		else
			object.eContainer.model
	}
		
	def MicroArchDef microArch(EObject object){
		if(object instanceof MicroArchDef) 
			object
		else
			object.eContainer.microArch
	}
}
